{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "WarmupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-warmup",
        "RetentionInDays": 7
      }
    },
    "PreauthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-preauth",
        "RetentionInDays": 7
      }
    },
    "AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-auth",
        "RetentionInDays": 7
      }
    },
    "InboxLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-inbox",
        "RetentionInDays": 7
      }
    },
    "DeliveryDashretryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-delivery-retry",
        "RetentionInDays": 7
      }
    },
    "OniotlifecycleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-oniotlifecycle",
        "RetentionInDays": 7
      }
    },
    "OnmessageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-onmessage",
        "RetentionInDays": 7
      }
    },
    "SealpendingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-sealpending",
        "RetentionInDays": 7
      }
    },
    "PollchainLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-pollchain",
        "RetentionInDays": 7
      }
    },
    "CheckDashfailedDashsealsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-check-failed-seals",
        "RetentionInDays": 7
      }
    },
    "ReinitializeDashcontainersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-reinitialize-containers",
        "RetentionInDays": 7
      }
    },
    "InfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-info",
        "RetentionInDays": 7
      }
    },
    "BotUnderscoreoninitLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-bot_oninit",
        "RetentionInDays": 7
      }
    },
    "OnresourcestreamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-onresourcestream",
        "RetentionInDays": 7
      }
    },
    "GraphqlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-graphql",
        "RetentionInDays": 7
      }
    },
    "SetconfLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-setconf",
        "RetentionInDays": 7
      }
    },
    "ImportUnderscoredataUnderscoreutilsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-import_data_utils",
        "RetentionInDays": 7
      }
    },
    "OnfidoUnderscoreregisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-onfido_register",
        "RetentionInDays": 7
      }
    },
    "OnfidoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-onfido",
        "RetentionInDays": 7
      }
    },
    "CliLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-cli",
        "RetentionInDays": 7
      }
    },
    "QrLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-qr",
        "RetentionInDays": 7
      }
    },
    "DeploymentUnderscorepingbackLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-deployment_pingback",
        "RetentionInDays": 7
      }
    },
    "ConfirmationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tdl-silly-ltd-dev-confirmation",
        "RetentionInDays": 7
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "tdl-silly-ltd",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-warmup:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-preauth:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-auth:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-inbox:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-delivery-retry:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-oniotlifecycle:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onmessage:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-sealpending:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-pollchain:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-check-failed-seals:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-reinitialize-containers:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-info:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-bot_oninit:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onresourcestream:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-graphql:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-setconf:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-import_data_utils:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onfido_register:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onfido:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-cli:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-qr:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-deployment_pingback:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-confirmation:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-warmup:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-preauth:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-auth:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-inbox:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-delivery-retry:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-oniotlifecycle:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onmessage:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-sealpending:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-pollchain:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-check-failed-seals:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-reinitialize-containers:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-info:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-bot_oninit:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onresourcestream:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-graphql:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-setconf:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-import_data_utils:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onfido_register:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-onfido:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-cli:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-qr:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-deployment_pingback:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tdl-silly-ltd-dev-confirmation:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:CreateTable",
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tdl-silly-ltd-dev-*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:ListStackResources",
                    "cloudformation:GetTemplate"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:UpdateFunctionConfiguration",
                    "lambda:ListFunctions"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:GetFunctionConfiguration"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tdl-silly-ltd-dev-*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "PrivateConfBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ObjectsBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "SecretsBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "FileUploadBucket"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject",
                    "s3:HeadObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "PrivateConfBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ObjectsBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "SecretsBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ServerlessDeploymentBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "FileUploadBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListAllMyBuckets"
                  ],
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:InvokeAsync"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Connect",
                    "iot:Subscribe",
                    "iot:Publish",
                    "iot:Receive",
                    "iot:DescribeEndpoint"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "IotClientRole",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Sid": "AllowCloudFrontUpdateDistribution",
                  "Action": [
                    "cloudfront:updateDistribution"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail",
                    "ses:GetIdentityVerificationAttributes"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "Bucket0Table",
                        "StreamArn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "tdl-silly-ltd",
              "dev",
              "ap-southeast-2",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "WarmupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-warmup",
        "Handler": "lib/in-house-bot/lambda/warmup.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "WarmupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PreauthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-preauth",
        "Handler": "lib/in-house-bot/lambda/http/preauth.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "PreauthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-auth",
        "Handler": "lib/in-house-bot/lambda/http/auth.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "AuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "InboxLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-inbox",
        "Handler": "lib/in-house-bot/lambda/http/inbox.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "PUT,POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "InboxLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeliveryDashretryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-delivery-retry",
        "Handler": "lib/in-house-bot/lambda/delivery-retry.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "DeliveryDashretryLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "OniotlifecycleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-oniotlifecycle",
        "Handler": "lib/in-house-bot/lambda/mqtt/oniotlifecycle.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "OniotlifecycleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "OnmessageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-onmessage",
        "Handler": "lib/in-house-bot/lambda/mqtt/onmessage.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "OnmessageLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SealpendingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-sealpending",
        "Handler": "lib/in-house-bot/lambda/sealpending.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "SealpendingLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PollchainLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-pollchain",
        "Handler": "lib/in-house-bot/lambda/pollchain.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "PollchainLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CheckDashfailedDashsealsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-check-failed-seals",
        "Handler": "lib/in-house-bot/lambda/check-failed-seals.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "CheckDashfailedDashsealsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ReinitializeDashcontainersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-reinitialize-containers",
        "Handler": "lib/in-house-bot/lambda/reinitialize-containers.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "ReinitializeDashcontainersLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "InfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-info",
        "Handler": "lib/in-house-bot/lambda/http/info.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "GET,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "InfoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "BotUnderscoreoninitLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-bot_oninit",
        "Handler": "lib/in-house-bot/lambda/oninit.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "BotUnderscoreoninitLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "OnresourcestreamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-onresourcestream",
        "Handler": "lib/in-house-bot/lambda/onresourcestream.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "OnresourcestreamLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GraphqlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-graphql",
        "Handler": "lib/in-house-bot/lambda/http/graphql.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "GET,POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "GraphqlLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SetconfLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-setconf",
        "Handler": "lib/in-house-bot/lambda/set-conf.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "SetconfLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ImportUnderscoredataUnderscoreutilsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-import_data_utils",
        "Handler": "lib/in-house-bot/lambda/import-data-utils.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "ImportUnderscoredataUnderscoreutilsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "OnfidoUnderscoreregisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-onfido_register",
        "Handler": "lib/in-house-bot/lambda/onfido-register.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "OnfidoUnderscoreregisterLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "OnfidoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-onfido",
        "Handler": "lib/in-house-bot/lambda/http/onfido-webhook.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "OnfidoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CliLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-cli",
        "Handler": "lib/in-house-bot/lambda/cli.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            }
          }
        }
      },
      "DependsOn": [
        "CliLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "QrLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-qr",
        "Handler": "lib/in-house-bot/lambda/http/qr.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "GET,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "QrLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DeploymentUnderscorepingbackLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-deployment_pingback",
        "Handler": "lib/in-house-bot/lambda/http/deployment-pingback.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "POST,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "DeploymentUnderscorepingbackLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ConfirmationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/tdl-silly-ltd/dev/1525890634946-2018-05-09T18:30:34.946Z/tdl-silly-ltd.zip"
        },
        "FunctionName": "tdl-silly-ltd-dev-confirmation",
        "Handler": "lib/in-house-bot/lambda/http/confirmation.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "BLUEBIRD_DEBUG": 1,
            "IOT_PARENT_TOPIC": "tdl-silly-ltd-dev",
            "IOT_CLIENT_ID_PREFIX": "tdl-silly-ltd-dev-",
            "BLOCKCHAIN": "ethereum:rinkeby",
            "CORDA_API_URL": "http://localhost:10007/api/share",
            "CORDA_API_KEY": "abc",
            "DEBUG": "lambda*,*tradle*,-@tradle/dynamodb",
            "DEBUG_LEVEL": 5,
            "DEBUG_FORMAT": "json",
            "SERVERLESS_PREFIX": "tdl-silly-ltd-dev-",
            "SERVERLESS_STAGE": "dev",
            "SERVERLESS_SERVICE_NAME": "tdl-silly-ltd",
            "NO_TIME_TRAVEL": false,
            "R_RESTAPI_ApiGateway": {
              "Ref": "ApiGatewayRestApi"
            },
            "R_BUCKET_Objects": {
              "Ref": "ObjectsBucket"
            },
            "R_BUCKET_Secrets": {
              "Ref": "SecretsBucket"
            },
            "R_BUCKET_PrivateConf": {
              "Ref": "PrivateConfBucket"
            },
            "R_BUCKET_FileUpload": {
              "Ref": "FileUploadBucket"
            },
            "R_BUCKETPOLICY_FileUpload": {
              "Ref": "FileUploadBucketPolicy"
            },
            "R_TABLE_Events": {
              "Ref": "EventsTable"
            },
            "R_ROLE_IotClient": {
              "Ref": "IotClientRole"
            },
            "R_ROLE_AutoScalingDynamoDB": {
              "Ref": "AutoScalingDynamoDBRole"
            },
            "R_TABLE_Bucket0": {
              "Ref": "Bucket0Table"
            },
            "R_BUCKET_ServerlessDeployment": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "R_STACK": {
              "Ref": "AWS::StackId"
            },
            "HTTP_METHODS": "GET,OPTIONS"
          }
        }
      },
      "DependsOn": [
        "ConfirmationLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "WarmupEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Input": "{\"concurrency\":5,\"functions\":[\"oniotlifecycle\",\"onmessage\",\"graphql\",\"info\",\"preauth\",\"auth\",\"inbox\"]}",
            "Arn": {
              "Fn::GetAtt": [
                "WarmupLambdaFunction",
                "Arn"
              ]
            },
            "Id": "warmupSchedule"
          }
        ]
      }
    },
    "WarmupLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WarmupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "WarmupEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "DeliveryDashretryEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DeliveryDashretryLambdaFunction",
                "Arn"
              ]
            },
            "Id": "delivery-retrySchedule"
          }
        ]
      }
    },
    "DeliveryDashretryLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeliveryDashretryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DeliveryDashretryEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "SealpendingEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SealpendingLambdaFunction",
                "Arn"
              ]
            },
            "Id": "sealpendingSchedule"
          }
        ]
      }
    },
    "SealpendingLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SealpendingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SealpendingEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "PollchainEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "PollchainLambdaFunction",
                "Arn"
              ]
            },
            "Id": "pollchainSchedule"
          }
        ]
      }
    },
    "PollchainLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PollchainLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "PollchainEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "CheckDashfailedDashsealsEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(17 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CheckDashfailedDashsealsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "check-failed-sealsSchedule"
          }
        ]
      }
    },
    "CheckDashfailedDashsealsLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckDashfailedDashsealsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CheckDashfailedDashsealsEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-tdl-silly-ltd",
        "BinaryMediaTypes": [
          "*/*"
        ]
      }
    },
    "ApiGatewayResourcePreauth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preauth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInbox": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "inbox",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "info",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGraphql": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "graphql",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOnfido": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "onfido",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQr": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "qr",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeploymentDashpingback": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deployment-pingback",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceConfirmation": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "confirmation",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPreauthOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreauth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodInboxOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,PUT'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceInbox"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodInfoOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGraphqlOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGraphql"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOnfidoOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOnfido"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodQrOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQr"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDeploymentDashpingbackOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeploymentDashpingback"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodConfirmationOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Tradle-Sig,cache'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceConfirmation"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPreauthPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreauth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PreauthLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodAuthPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AuthLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodInboxPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInbox"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InboxLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodInboxPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInbox"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InboxLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodInfoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGraphqlGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGraphql"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GraphqlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGraphqlPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGraphql"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GraphqlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodOnfidoPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOnfido"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "OnfidoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodQrGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQr"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "QrLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodDeploymentDashpingbackPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeploymentDashpingback"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeploymentUnderscorepingbackLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodConfirmationGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceConfirmation"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ConfirmationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1525890638540": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPreauthPost",
        "ApiGatewayMethodAuthPost",
        "ApiGatewayMethodInboxPut",
        "ApiGatewayMethodInboxPost",
        "ApiGatewayMethodInfoGet",
        "ApiGatewayMethodGraphqlGet",
        "ApiGatewayMethodGraphqlPost",
        "ApiGatewayMethodOnfidoPost",
        "ApiGatewayMethodQrGet",
        "ApiGatewayMethodDeploymentDashpingbackPost",
        "ApiGatewayMethodConfirmationGet"
      ]
    },
    "ApiGatewayApiKey1": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "issue2233WorkaroundKey-tdl-silly-ltd-dev",
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          }
        ]
      },
      "DependsOn": "ApiGatewayDeployment1525890638540"
    },
    "ApiGatewayUsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1525890638540",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan for tdl-silly-ltd dev stage",
        "UsagePlanName": "tdl-silly-ltd-dev"
      }
    },
    "ApiGatewayUsagePlanKey1": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {
          "Ref": "ApiGatewayApiKey1"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "ApiGatewayUsagePlan"
        }
      }
    },
    "PreauthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreauthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InboxLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InboxLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GraphqlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GraphqlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "OnfidoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OnfidoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "QrLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "QrLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeploymentUnderscorepingbackLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeploymentUnderscorepingbackLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ConfirmationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConfirmationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "OnresourcestreamEventSourceMappingDynamodbBucket0Table": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "Bucket0Table",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "OnresourcestreamLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON",
        "Enabled": "True"
      }
    },
    "OniotlifecycleIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "RuleDisabled": "false",
          "Sql": "SELECT * as data, topic() as topic FROM '$aws/events/presence/connected/#' WHERE startswith(clientId, 'tdl-silly-ltd-dev-')",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OniotlifecycleLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "OniotlifecycleLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OniotlifecycleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "OniotlifecycleIotTopicRule1"
              }
            ]
          ]
        }
      }
    },
    "OniotlifecycleIotTopicRule2": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "RuleDisabled": "false",
          "Sql": "SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, 'tdl-silly-ltd-dev-')",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OniotlifecycleLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "OniotlifecycleLambdaPermissionIotTopicRule2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OniotlifecycleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "OniotlifecycleIotTopicRule2"
              }
            ]
          ]
        }
      }
    },
    "OniotlifecycleIotTopicRule3": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "RuleDisabled": "false",
          "Sql": "SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, 'tdl-silly-ltd-dev-')",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OniotlifecycleLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "OniotlifecycleLambdaPermissionIotTopicRule3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OniotlifecycleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "OniotlifecycleIotTopicRule3"
              }
            ]
          ]
        }
      }
    },
    "OnmessageIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "RuleDisabled": "false",
          "Sql": "SELECT encode(*, 'base64') as data, clientid() as clientId, topic() as topic FROM 'tdl-silly-ltd-dev/+/pub/outbox'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OnmessageLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "OnmessageLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OnmessageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "OnmessageIotTopicRule1"
              }
            ]
          ]
        }
      }
    },
    "AwsAlertsAlarm": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "tdl-silly-ltd-dev-alerts-alarm",
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": {
              "Fn::FindInMap": [
                "org",
                "contact",
                "adminEmail"
              ]
            }
          }
        ]
      }
    },
    "WarmupFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "WarmupLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "WarmupFunctionInvocationsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Invocations",
        "Threshold": 50,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "WarmupLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OniotlifecycleFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OniotlifecycleLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OniotlifecycleFunctionThrottlesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Throttles",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OniotlifecycleLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OniotlifecycleFunctionInvocationsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Invocations",
        "Threshold": 50,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OniotlifecycleLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OnmessageFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OnmessageLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OnmessageFunctionThrottlesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Throttles",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OnmessageLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OnmessageFunctionInvocationsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Invocations",
        "Threshold": 50,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OnmessageLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "SealpendingFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "SealpendingLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "PollchainFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "PollchainLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "CheckDashfailedDashsealsFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CheckDashfailedDashsealsLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "OnresourcestreamFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "OnresourcestreamLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "GraphqlFunctionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "GraphqlLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "GraphqlFunctionThrottlesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Throttles",
        "Threshold": 10,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "GraphqlLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "GraphqlFunctionInvocationsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Namespace": "AWS/Lambda",
        "MetricName": "Invocations",
        "Threshold": 50,
        "Period": 60,
        "EvaluationPeriods": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "OKActions": [],
        "AlarmActions": [
          {
            "Ref": "AwsAlertsAlarm"
          }
        ],
        "InsufficientDataActions": [],
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "GraphqlLambdaFunction"
            }
          }
        ],
        "TreatMissingData": "missing",
        "Statistic": "Sum"
      }
    },
    "AlertsDashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": "tdl-silly-ltd-dev-ap-southeast-2",
        "DashboardBody": "{\"widgets\":[{\"type\":\"metric\",\"x\":0,\"y\":0,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Errors\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":0,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Errors\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":0,\"width\":10,\"height\":6,\"properties\":{\"title\":\"Duration\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"warmup p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"warmup p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"preauth p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"preauth p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"auth p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"auth p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"inbox p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"inbox p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onmessage p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onmessage p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"sealpending p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"sealpending p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"pollchain p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"pollchain p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"info p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"info p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"graphql p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"graphql p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"setconf p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"setconf p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"cli p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"cli p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"qr p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"qr p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback p90\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"confirmation p50\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"confirmation p90\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":0,\"y\":6,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Invocations\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":6,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Invocations\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":6,\"width\":10,\"height\":6,\"properties\":{\"title\":\"API Requests\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ApiGateway\",\"5XXError\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"Sum\",\"period\":900}],[\"AWS/ApiGateway\",\"4XXError\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"Sum\",\"period\":900}],[\"AWS/ApiGateway\",\"Count\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"Sum\",\"period\":900}]],\"region\":\"ap-southeast-2\"}},{\"type\":\"metric\",\"x\":0,\"y\":12,\"width\":8,\"height\":6,\"properties\":{\"title\":\"Throttles\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":900,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":8,\"y\":12,\"width\":6,\"height\":6,\"properties\":{\"title\":\"Throttles\",\"view\":\"singleValue\",\"metrics\":[[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-warmup\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"warmup\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-preauth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"preauth\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-auth\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"auth\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-inbox\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"inbox\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-delivery-retry\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"delivery-retry\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-oniotlifecycle\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"oniotlifecycle\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onmessage\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onmessage\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-sealpending\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"sealpending\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-pollchain\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"pollchain\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-check-failed-seals\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"check-failed-seals\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-reinitialize-containers\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"reinitialize-containers\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-info\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"info\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-bot_oninit\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"bot_oninit\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onresourcestream\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onresourcestream\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-graphql\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"graphql\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-setconf\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"setconf\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-import_data_utils\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"import_data_utils\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido_register\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido_register\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-onfido\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"onfido\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-cli\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"cli\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-qr\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"qr\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-deployment_pingback\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"deployment_pingback\"}],[\"AWS/Lambda\",\"Throttles\",\"FunctionName\",\"tdl-silly-ltd-dev-confirmation\",{\"stat\":\"Sum\",\"period\":2592000,\"region\":\"ap-southeast-2\",\"label\":\"confirmation\"}]],\"region\":\"ap-southeast-2\",\"period\":300}},{\"type\":\"metric\",\"x\":14,\"y\":12,\"width\":10,\"height\":6,\"properties\":{\"title\":\"API Latency\",\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\"}],[\"AWS/ApiGateway\",\"Latency\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"p50\",\"period\":900,\"region\":\"ap-southeast-2\"}],[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\"}],[\"AWS/ApiGateway\",\"Latency\",\"ApiName\",\"dev-tdl-silly-ltd\",{\"stat\":\"p90\",\"period\":900,\"region\":\"ap-southeast-2\"}]],\"region\":\"ap-southeast-2\"}}]}"
      }
    },
    "tdlsillyltdTableScalingPolicyWriteEventsTableDevApsoutheast2": {
      "DependsOn": [
        "EventsTable",
        "tdlsillyltdAutoScalingTargetWriteEventsTableDevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWriteEventsTableDevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteEventsTableDevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteEventsTableDevApsoutheast2": {
      "DependsOn": [
        "EventsTable",
        "AutoScalingDynamoDBRole"
      ],
      "Properties": {
        "MaxCapacity": 100,
        "MinCapacity": 5,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "EventsTable"
              }
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              }
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              }
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx0"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableDevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriteBucket0TableDevApsoutheast2",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableDevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx0"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx1"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx0DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri16056f3426f460c8057a1bd7f464d7f0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx0DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx1"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx2"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx1DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri09fc3a4870c364ace1f0dfd22abb0ac0",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx1DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx2"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx3"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx2DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWriefdce3bb6e94e61c98e3e8176ece4b94",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx2DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx3"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyReadBucket0TableIdx4DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx4DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyReadBucket0TableIdx4DevApsoutheast2",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetReadBucket0TableIdx4DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 70
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetReadBucket0TableIdx4DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx4"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "tdlsillyltdTableScalingPolicyWri41fb72d1298b54ad0839adc99432ef0c": {
      "DependsOn": [
        "Bucket0Table",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx4DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2"
      ],
      "Properties": {
        "PolicyName": "tdlsillyltdTableScalingPolicyWri41fb72d1298b54ad0839adc99432ef0c",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx4DevApsoutheast2"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx4DevApsoutheast2": {
      "DependsOn": [
        "Bucket0Table",
        "AutoScalingDynamoDBRole",
        "tdlsillyltdTableScalingPolicyReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdAutoScalingTargetReadBucket0TableIdx3DevApsoutheast2",
        "tdlsillyltdTableScalingPolicyWri3dede5e57f80df0a2c9e7f218b7a5c69",
        "tdlsillyltdAutoScalingTargetWriteBucket0TableIdx3DevApsoutheast2"
      ],
      "Properties": {
        "MaxCapacity": 500,
        "MinCapacity": 10,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "table/",
              {
                "Ref": "Bucket0Table"
              },
              "/index/",
              "idx4"
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScalingDynamoDBRole",
            "Arn"
          ]
        },
        "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
        "ServiceNamespace": "dynamodb"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "ObjectsBucket": {
      "Type": "AWS::S3::Bucket",
      "Description": "content-addressed storage for all objects",
      "DeletionPolicy": "Retain"
    },
    "SecretsBucket": {
      "Type": "AWS::S3::Bucket",
      "Description": "stuff",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "PrivateConfBucket": {
      "Type": "AWS::S3::Bucket",
      "Description": "private configuration files",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "FileUploadBucket": {
      "Type": "AWS::S3::Bucket",
      "Description": "file upload destination for all users",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "MaxAge": 3600
            }
          ]
        }
      }
    },
    "FileUploadBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "FileUploadBucket"
        },
        "PolicyDocument": {
          "Id": "FileUploadBucketPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PutAccess",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "FileUploadBucket"
                      },
                      "/",
                      "${aws:userid}",
                      "/*"
                    ]
                  ]
                }
              ],
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "IotClientRole",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "EventsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Description": "source of truth",
      "Properties": {
        "TableName": "tdl-silly-ltd-dev-events",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },
    "IotClientRole": {
      "Type": "AWS::IAM::Role",
      "Description": "role assumed by every connecting client",
      "Properties": {
        "RoleName": "tdl-silly-ltd-dev-IotClientRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ],
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "IotClientRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:::log-group:/aws/lambda/*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Connect"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:iot",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "client/${iot:ClientId}"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Publish"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:iot",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "topic/tdl-silly-ltd-dev/${iot:ClientId}/pub/outbox"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Subscribe"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:iot",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "topicfilter/tdl-silly-ltd-dev/${iot:ClientId}/sub/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Receive"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:iot",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "topic/tdl-silly-ltd-dev/${iot:ClientId}/sub/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AutoScalingDynamoDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AutoScalingDynamoDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:UpdateTable"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:dynamodb:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":*:table/tdl-silly-ltd-dev-*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DeleteAlarms"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "Initialize": {
      "Type": "Custom::InitializeDeployment",
      "DependsOn": "ApiGatewayApiKey1",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BotUnderscoreoninitLambdaFunction",
            "Arn"
          ]
        },
        "name": {
          "Fn::FindInMap": [
            "org",
            "init",
            "name"
          ]
        },
        "domain": {
          "Fn::FindInMap": [
            "org",
            "init",
            "domain"
          ]
        },
        "logo": {
          "Fn::FindInMap": [
            "org",
            "init",
            "logo"
          ]
        },
        "deploymentUUID": {
          "Fn::FindInMap": [
            "deployment",
            "init",
            "deploymentUUID"
          ]
        },
        "referrerUrl": {
          "Fn::FindInMap": [
            "deployment",
            "init",
            "referrerUrl"
          ]
        }
      }
    },
    "Bucket0Table": {
      "Type": "AWS::DynamoDB::Table",
      "Description": "table that stores multiple models",
      "DependsOn": [
        "EventsTable"
      ],
      "Properties": {
        "TableName": "tdl-silly-ltd-dev-bucket-0",
        "AttributeDefinitions": [
          {
            "AttributeName": "__h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__r__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x0h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x0r__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x1h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x1r__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x2h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x2r__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x3h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x3r__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x4h__",
            "AttributeType": "S"
          },
          {
            "AttributeName": "__x4r__",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "__h__",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "__r__",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 10,
          "WriteCapacityUnits": 10
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "idx0",
            "KeySchema": [
              {
                "AttributeName": "__x0h__",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "__x0r__",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            }
          },
          {
            "IndexName": "idx1",
            "KeySchema": [
              {
                "AttributeName": "__x1h__",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "__x1r__",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            }
          },
          {
            "IndexName": "idx2",
            "KeySchema": [
              {
                "AttributeName": "__x2h__",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "__x2r__",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            }
          },
          {
            "IndexName": "idx3",
            "KeySchema": [
              {
                "AttributeName": "__x3h__",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "__x3r__",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            }
          },
          {
            "IndexName": "idx4",
            "KeySchema": [
              {
                "AttributeName": "__x4h__",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "__x4r__",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 10,
              "WriteCapacityUnits": 10
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.ap-southeast-2.amazonaws.com/dev"
          ]
        ]
      }
    },
    "ApiGatewayRestApi": {
      "Value": {
        "Ref": "ApiGatewayRestApi"
      }
    },
    "ObjectsBucket": {
      "Description": "content-addressed storage for all objects",
      "Value": {
        "Ref": "ObjectsBucket"
      }
    },
    "SecretsBucket": {
      "Description": "stuff",
      "Value": {
        "Ref": "SecretsBucket"
      }
    },
    "PrivateConfBucket": {
      "Description": "private configuration files",
      "Value": {
        "Ref": "PrivateConfBucket"
      }
    },
    "FileUploadBucket": {
      "Description": "file upload destination for all users",
      "Value": {
        "Ref": "FileUploadBucket"
      }
    },
    "FileUploadBucketPolicy": {
      "Value": {
        "Ref": "FileUploadBucketPolicy"
      }
    },
    "EventsTable": {
      "Description": "source of truth",
      "Value": {
        "Ref": "EventsTable"
      }
    },
    "IotClientRole": {
      "Description": "role assumed by every connecting client",
      "Value": {
        "Ref": "IotClientRole"
      }
    },
    "AutoScalingDynamoDBRole": {
      "Value": {
        "Ref": "AutoScalingDynamoDBRole"
      }
    },
    "Bucket0Table": {
      "Description": "table that stores multiple models",
      "Value": {
        "Ref": "Bucket0Table"
      }
    },
    "ServerlessDeploymentBucket": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    }
  },
  "Mappings": {
    "org": {
      "init": {
        "name": "Silly",
        "domain": "silly.silly",
        "logo": "https://s3.amazonaws.com/tradle-public-images/logo/alien.png"
      },
      "contact": {
        "adminEmail": "mark@tradle.io"
      }
    },
    "deployment": {
      "init": {
        "service": "tdl-silly-ltd",
        "stage": "dev",
        "stackName": "tdl-silly-ltd-dev",
        "referrerUrl": "",
        "deploymentUUID": ""
      }
    }
  }
}