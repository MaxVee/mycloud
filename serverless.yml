service: tradle
frameworkVersion: '>=1.5.0 <2.0.0'
plugins:
  - serverless-plugin-tracing
  - serverless-sam
package:
  exclude:
    - .git/**
    - .serverless/**
    - scripts/**
    - node_modules/**
    - simulate/**
    - ./**/*.log
custom:
  stage: dev
  region: us-east-1
  blockchain: 'bitcoin:testnet'
  prefix: '${{self:service}}-${{self:custom.stage}}-'
  prefixRole: '${{self:custom.prefix}}'
  prefixIOTTopic: '${{self:service}}-'
  prefixSNSTopic: '${{self:custom.prefix}}'
  versionSQL: '2016-03-23'
  thresholdBillingAlarm: 1
  thresholdThrottlingAlarm: 0
  thresholdInvocationErrorsAlarm: 0
  defaultEmailForNotifications: mark@tradle.io
  pushServer: 'https://push1.tradle.io'
  bot_onmessage: bot_onmessage
  bot_onsealevent: bot_onsealevent
  bot_onpresence: bot_onpresence
  bot_graphql: bot_graphql
  bot_processinbox: bot_processinbox
  bot_processoutbox: bot_processoutbox
  tables:
    presence: '${{self:custom.prefix}}presence'
    seals: '${{self:custom.prefix}}seals'
    pubkeys: '${{self:custom.prefix}}pubkeys'
    inbox: '${{self:custom.prefix}}inbox'
    outbox: '${{self:custom.prefix}}outbox'
    events: '${{self:custom.prefix}}events'
    users: '${{self:custom.prefix}}users'
provider:
  versionFunctions: false
  tracing: true
  variableSyntax: '\${{([\s\S]+?)}}'
  name: aws
  runtime: nodejs6.10
  profile: serverless
  stage: '${{self:custom.stage}}'
  region: '${{self:custom.region}}'
  memorySize: 512
  timeout: 60
  environment:
    IOT_TOPIC_PREFIX: '${{self:custom.prefixIOTTopic}}'
    IOT_ENDPOINT: ''
    BLOCKCHAIN: '${{self:custom.blockchain}}'
    DEBUG: 'tradle:*,Î»*'
    SERVERLESS_PREFIX: '${{self:custom.prefix}}'
    SERVERLESS_STAGE: '${{self:custom.stage}}'
    SERVERLESS_SERVICE_NAME: '${{self:service}}'
    PUSH_SERVER_URL: '${{self:custom.pushServer}}'
    BOT_ONPRESENCE: '${{self:custom.bot_onpresence}}'
    BOT_ONMESSAGE: '${{self:custom.bot_onmessage}}'
    ORG_DOMAIN: tradle.io
    ORG_NAME: Tradle
    ORG_LOGO: '${{file(./env.json):LOGO_TRADLE}}'
    R_BUCKET_Objects:
      Ref: ObjectsBucket
    R_BUCKET_Secrets:
      Ref: SecretsBucket
    R_BUCKET_PublicConf:
      Ref: PublicConfBucket
    R_TABLE_Events:
      Ref: EventsTable
    R_TABLE_PubKeys:
      Ref: PubKeysTable
    R_TABLE_Inbox:
      Ref: InboxTable
    R_TABLE_Outbox:
      Ref: OutboxTable
    R_TABLE_Seals:
      Ref: SealsTable
    R_TABLE_Users:
      Ref: UsersTable
    R_TABLE_Presence:
      Ref: PresenceTable
    R_ROLE_IotClient:
      Ref: IotClientRole
    R_BUCKET_ServerlessDeployment:
      Ref: ServerlessDeploymentBucket
    R_RESTAPI_ApiGateway:
      Ref: ApiGatewayRestApi
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:CreateTable'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:DescribeStream'
        - 'dynamodb:GetRecords'
        - 'dynamodb:GetShardIterator'
        - 'dynamodb:ListStreams'
      Resource:
        - 'Fn::Sub': >-
            arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.prefix}}*
    - Effect: Allow
      Action:
        - 'cloudformation:ListStackResources'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'lambda:UpdateFunctionConfiguration'
        - 'lambda:GetFunctionConfiguration'
      Resource:
        - 'Fn::Sub': >-
            arn:aws:lambda:${{self:custom.region}}:${AWS::AccountId}:function:${{self:custom.prefix}}*
    - Effect: Allow
      Action:
        - 's3:ListBucket'
      Resource:
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: PublicConfBucket
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: ObjectsBucket
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: SecretsBucket
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: ServerlessDeploymentBucket
    - Effect: Allow
      Action:
        - 's3:PutObject'
        - 's3:PutObjectAcl'
        - 's3:GetObject'
        - 's3:HeadObject'
      Resource:
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: PublicConfBucket
              - /*
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: ObjectsBucket
              - /*
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: SecretsBucket
              - /*
        - 'Fn::Join':
            - ''
            - - 'arn:aws:s3:::'
              - Ref: ServerlessDeploymentBucket
    - Effect: Allow
      Action:
        - 's3:GetBucketLocation'
        - 's3:ListAllMyBuckets'
      Resource: 'arn:aws:s3:::*'
    - Effect: Allow
      Action:
        - 'lambda:InvokeFunction'
        - 'lambda:InvokeAsync'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'iot:Connect'
        - 'iot:Subscribe'
        - 'iot:Publish'
        - 'iot:Receive'
        - 'iot:DescribeEndpoint'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'sts:AssumeRole'
      Resource:
        - 'Fn::GetAtt':
            - IotClientRole
            - Arn
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource: '*'
    - Effect: Allow
      Sid: AllowCloudFrontUpdateDistribution
      Action:
        - 'cloudfront:updateDistribution'
      Resource:
        - '*'
functions:
  preauth:
    handler: project/lib/lambda/http/preauth.handler
    memorySize: 1024
    events:
      - http:
          path: tradle/preauth
          method: post
          cors: true
  auth:
    handler: project/lib/lambda/http/auth.handler
    memorySize: 1024
    events:
      - http:
          path: tradle/auth
          method: post
          cors: true
  inbox2events:
    handler: project/lib/lambda/inbox-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - InboxTable
              - StreamArn
  outbox2events:
    handler: project/lib/lambda/outbox-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - OutboxTable
              - StreamArn
  seal2events:
    handler: project/lib/lambda/seal-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - SealsTable
              - StreamArn
  onconnect:
    handler: project/lib/lambda/mqtt/onconnect.handler
    events:
      - iot:
          sql: 'SELECT * FROM ''$aws/events/presence/connected/#'''
          sqlVersion: '${{self:custom.versionSQL}}'
  ondisconnect:
    handler: project/lib/lambda/mqtt/ondisconnect.handler
    events:
      - iot:
          sql: 'SELECT * FROM ''$aws/events/presence/disconnected/#'''
          sqlVersion: '${{self:custom.versionSQL}}'
  onsubscribe:
    handler: project/lib/lambda/mqtt/onsubscribe.handler
    memorySize: 1024
    events:
      - iot:
          sql: 'SELECT * FROM ''$aws/events/subscriptions/subscribed/#'''
          sqlVersion: '${{self:custom.versionSQL}}'
  onmessage:
    handler: project/lib/lambda/mqtt/onmessage.handler
    memorySize: 1024
    events:
      - iot:
          sql: >-
            SELECT * as data, clientid() as clientId FROM
            '${{self:custom.prefixIOTTopic}}message'
          sqlVersion: '${{self:custom.versionSQL}}'
  onmessage_http:
    handler: project/lib/lambda/http/onmessage.handler
    memorySize: 1024
    events:
      - http:
          path: tradle/message
          method: put
          cors: true
  send:
    handler: project/lib/lambda/send.handler
    memorySize: 1024
  identity:
    handler: project/lib/lambda/identity.handler
  setenvvars:
    handler: project/lib/lambda/setenvvars.handler
    description:
      Ref: 'AWS::StackId'
  info:
    handler: project/lib/lambda/info.handler
    memorySize: 256
    events:
      - http:
          path: tradle/info
          method: get
          cors: true
  init:
    handler: project/lib/lambda/init.handler
    memorySize: 512
  faucet_bitcoin:
    handler: project/lib/lambda/faucet-bitcoin.withdraw
  recharge:
    handler: project/lib/lambda/recharge.handler
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false
  sealpending:
    handler: project/lib/lambda/sealpending.handler
    memorySize: 1024
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false
  pollchain:
    handler: project/lib/lambda/pollchain.handler
    memorySize: 1024
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false
  clienttest:
    handler: project/lib/lambda/clienttest.handler
    timeout: 15
  bot_onmessage:
    handler: project/samplebot/index.onmessage
    memorySize: 1024
  bot_onsealevent:
    handler: project/samplebot/index.onsealevent
    memorySize: 1024
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - SealsTable
              - StreamArn
  bot_processinbox:
    handler: project/samplebot/index.onmessagestream
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - InboxTable
              - StreamArn
  bot_processoutbox:
    handler: project/samplebot/index.onmessagestream
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            'Fn::GetAtt':
              - OutboxTable
              - StreamArn
  bot_graphql:
    handler: project/samplebot/index.ongraphql
    memorySize: 256
    events:
      - http:
          path: tradle/graphql
          method: post
          cors: true
resources:
  Resources:
    ObjectsBucket:
      Type: 'AWS::S3::Bucket'
      Description: content-addressed storage for all objects
      DeletionPolicy: Retain
    SecretsBucket:
      Type: 'AWS::S3::Bucket'
      Description: stuff
      DeletionPolicy: Retain
    PublicConfBucket:
      Type: 'AWS::S3::Bucket'
      Description: 'public configuration, e.g. identity, styles, logo, etc.'
      DeletionPolicy: Retain
    EventsTable:
      Type: 'AWS::DynamoDB::Table'
      Description: source of truth
      Properties:
        TableName: '${{self:custom.tables.events}}'
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    PubKeysTable:
      Type: 'AWS::DynamoDB::Table'
      Description: maps pub keys to identities
      Properties:
        TableName: '${{self:custom.tables.pubkeys}}'
        AttributeDefinitions:
          - AttributeName: pub
            AttributeType: S
          - AttributeName: permalink
            AttributeType: S
        KeySchema:
          - AttributeName: pub
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: permalink
            KeySchema:
              - AttributeName: permalink
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - link
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    InboxTable:
      Type: 'AWS::DynamoDB::Table'
      Description: inbound messages from users
      Properties:
        TableName: '${{self:custom.tables.inbox}}'
        AttributeDefinitions:
          - AttributeName: _author
            AttributeType: S
          - AttributeName: _link
            AttributeType: S
          - AttributeName: time
            AttributeType: 'N'
        KeySchema:
          - AttributeName: _author
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: _link
            KeySchema:
              - AttributeName: _link
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    OutboxTable:
      Type: 'AWS::DynamoDB::Table'
      Description: outbound messages to users
      Properties:
        TableName: '${{self:custom.tables.outbox}}'
        AttributeDefinitions:
          - AttributeName: _recipient
            AttributeType: S
          - AttributeName: time
            AttributeType: 'N'
        KeySchema:
          - AttributeName: _recipient
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    SealsTable:
      Type: 'AWS::DynamoDB::Table'
      Description: blockchain seals for objects
      Properties:
        TableName: '${{self:custom.tables.seals}}'
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: address
            AttributeType: S
          - AttributeName: unconfirmed
            AttributeType: S
          - AttributeName: unsealed
            AttributeType: S
          - AttributeName: link
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: unconfirmed
            KeySchema:
              - AttributeName: unconfirmed
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: unsealed
            KeySchema:
              - AttributeName: unsealed
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: link
            KeySchema:
              - AttributeName: link
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Description: per-user state objects
      Properties:
        TableName: '${{self:custom.tables.users}}'
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    PresenceTable:
      Type: 'AWS::DynamoDB::Table'
      Description: maps ephemeral mqtt client ids to identity permalinks
      Properties:
        TableName: '${{self:custom.tables.presence}}'
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
          - AttributeName: permalink
            AttributeType: S
        KeySchema:
          - AttributeName: permalink
            KeyType: HASH
          - AttributeName: clientId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    IotClientRole:
      Type: 'AWS::IAM::Role'
      Description: role assumed by every connecting client
      Properties:
        RoleName: '${{self:custom.prefixRole}}IotClientRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                AWS:
                  - 'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:root'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: IotClientRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    - 'Fn::Sub': >-
                        arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/PresenceTable
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: 'arn:aws:logs:::log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - 'iot:Connect'
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - 'iot:Publish'
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - 'iot:Subscribe'
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - 'iot:Receive'
                  Resource:
                    - '*'
  Outputs:
    ObjectsBucket:
      Description: content-addressed storage for all objects
      Value:
        Ref: ObjectsBucket
    SecretsBucket:
      Description: stuff
      Value:
        Ref: SecretsBucket
    PublicConfBucket:
      Description: 'public configuration, e.g. identity, styles, logo, etc.'
      Value:
        Ref: PublicConfBucket
    EventsTable:
      Description: source of truth
      Value:
        Ref: EventsTable
    PubKeysTable:
      Description: maps pub keys to identities
      Value:
        Ref: PubKeysTable
    InboxTable:
      Description: inbound messages from users
      Value:
        Ref: InboxTable
    OutboxTable:
      Description: outbound messages to users
      Value:
        Ref: OutboxTable
    SealsTable:
      Description: blockchain seals for objects
      Value:
        Ref: SealsTable
    UsersTable:
      Description: per-user state objects
      Value:
        Ref: UsersTable
    PresenceTable:
      Description: maps ephemeral mqtt client ids to identity permalinks
      Value:
        Ref: PresenceTable
    IotClientRole:
      Description: role assumed by every connecting client
      Value:
        Ref: IotClientRole
    ServerlessDeploymentBucket:
      Value:
        Ref: ServerlessDeploymentBucket
    ApiGatewayRestApi:
      Value:
        Ref: ApiGatewayRestApi
