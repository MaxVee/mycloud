
require('dotenv').config()
const fs = require('fs')
const { s3 } = require('./aws')
const KeyEncoder = require('key-encoder')
const co = require('./utils').loudCo
const { utils } = require('@tradle/engine')
const encoders = {}

const saveIdentityAndKeys = co(function* (err, result) {
  if (err) throw err

  const { identity, link } = result
  const permalink = link
  const keys = result.keys
    .map(key => key.toJSON(true))
    .map(key => {
      if (key.type !== 'ec' || key.curve === 'curve25519') return key

      const encoder = getEncoder(key.curve)
      // pre-encode to avoid wasting time importing in lambda
      return utils.clone(key, {
        priv: encoder.encodePrivate(new Buffer(key.priv), 'raw', 'pem'),
        pub: encoder.encodePublic(new Buffer(key.pub), 'raw', 'pem')
      })
    })

  yield [
    s3.createBucket({
      Bucket: config.secretsBucket
    }).promise(),
    s3.createBucket({
      Bucket: config.objectsBucket
    }).promise()
  ];

  // TODO: encrypt
  yield [
    s3.putObject({
      Bucket: config.secretsBucket,
      Key: config.identityKeysKey,
      Body: JSON.stringify({ link, identity, keys })
    }).promise(),
    s3.putObject({
      Bucket: config.objectsBucket,
      Key: link,
      Body: JSON.stringify({ link, permalink, object: identity })
    }).promise()
  ];
})

utils.newIdentity({ networkName: config.networkName }, saveIdentityAndKeys)

function getEncoder (curve) {
  if (!encoders[curve]) {
    encoders[curve] = new KeyEncoder(curve)
  }

  return encoders[curve]
}
