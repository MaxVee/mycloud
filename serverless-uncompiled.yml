service: tradle
frameworkVersion: ">=1.5.0 <2.0.0"

plugins:
  # - serverless-resources-env
  - serverless-plugin-tracing
  # - serverless-pseudo-parameters
  - serverless-sam
  - serverless-apigw-binary
  # - serverless-plugin-typescript
  - print
  # - serverless-dynamodb-ttl
  # - serverless-plugin-write-env-vars
  # - serverless-plugin-include-dependencies
  # - serverless-dynamodb-local
  - serverless-offline

package:
  # artifactDirectoryName: serverless/${{self:service}}/${{self:provider.stage}}/artifacts
  exclude:
    - .git/**
    - .serverless/**
    - project/scripts/**
    - project/lib/cli/**
    - node_modules/**
    - simulate/**
    - node_modules/**/test/**
    - ./bot/**
    - ./**/*.log

custom:
  # vars: ${{file(./vars.yml)}}
  # move these to vars.yml when this issue is fixed:
  #   https://github.com/serverless/serverless/issues/3740
  defaultStage: dev
  stage: ${{opt:stage, self:custom.defaultStage}}
  region: us-east-1
  blockchain: ethereum:rinkeby
  brand: ${{file(./project/conf/${{self:service}}.json)}}

  # copied from vars.yml
  # defaultEmailForNotifications: ${{self:custom.vars.defaultEmailForNotifications}}
  # blockchain: ${{self:custom.vars.blockchain}}
  # thresholdBillingAlarm: ${{self:custom.vars.thresholdBillingAlarm}}
  # thresholdThrottlingAlarm: ${{self:custom.vars.thresholdThrottlingAlarm}}
  # thresholdInvocationErrorsAlarm: ${{self:custom.vars.thresholdInvocationErrorsAlarm}}

  # stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaultStage}}
  # region: ${{opt:region, self:custom.vars.region}}

  # prefixes
  prefix: ${{self:service}}-${{self:custom.stage}}-
  prefixRole: ${{self:custom.prefix}}
  # maybe during info/auth, the server can send back the prefix
  prefixIOTTopic: ${{self:service}}-
  prefixSNSTopic: ${{self:custom.prefix}}

  # versions
  versionSQL: "2016-03-23"
  thresholdBillingAlarm: 1 # $1 / hr
  thresholdThrottlingAlarm: 0
  thresholdInvocationErrorsAlarm: 0
  defaultEmailForNotifications: mark@tradle.io # support@tradle.io

  # sns
  # billingAlarmTopic: ${{self:custom.prefixSNSTopic}}BillingAlarmNotification
  # throttlingAlarmTopic: ${{self:custom.prefixSNSTopic}}ThrottlingAlarmNotification
  # invocationErrorsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationErrorsAlarmNotification

  # hostedZoneName: tradle.io
  # domainName: lambda1.tradle.io
  pushServer: https://push1.tradle.io

  # bot hooks
  bot_onmessage: bot_onmessage
  bot_onsealevent: bot_onsealevent
  bot_onpresence: bot_onpresence
  bot_graphql: bot_graphql
  bot_processinbox: bot_processinbox
  bot_processoutbox: bot_processoutbox
  bot_samples: bot_samples

  tables:
    presence: ${{self:custom.prefix}}presence
    seals: ${{self:custom.prefix}}seals
    pubkeys: ${{self:custom.prefix}}pubkeys
    inbox: ${{self:custom.prefix}}inbox
    outbox: ${{self:custom.prefix}}outbox
    events: ${{self:custom.prefix}}events
    # pushsubscribers: ${{self:custom.prefix}}pushsubscribers
    users: ${{self:custom.prefix}}users

  apigwBinary:
    types:
      - '*/*'

  serverless-offline:
    port: 21012

#   secrets: ${{file(secrets.${opt:stage, self:provider.stage}}.yml)}
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migration: true
  #   migration:
  #     dir: offline/migrations

provider:
  # avoid some bugs in serverless
  versionFunctions: false
  tracing: true
  # https://github.com/serverless/serverless/issues/4312#issuecomment-331946882
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  name: aws
  runtime: nodejs6.10
  profile: serverless
  stage: ${{self:custom.stage}}
  region: ${{self:custom.region}}
  memorySize: 512
  timeout: 60
  # deploymentBucket: io.tradle.${{self:custom.stage}}.deploys
  environment:
    # enable long stack traces
    BLUEBIRD_DEBUG: 1
    IOT_TOPIC_PREFIX: ${{self:custom.prefixIOTTopic}}
    # declare
    IOT_ENDPOINT: ''
    BLOCKCHAIN: ${{self:custom.blockchain}}
    DEBUG: tradle:*,Î»*,@tradle*,dynogels*
    SERVERLESS_PREFIX: ${{self:custom.prefix}}
    SERVERLESS_STAGE: ${{self:custom.stage}}
    SERVERLESS_SERVICE_NAME: ${{self:service}}
    PUSH_SERVER_URL: ${{self:custom.pushServer}}
    BOT_ONPRESENCE: ${{self:custom.bot_onpresence}}
    BOT_ONMESSAGE: ${{self:custom.bot_onmessage}}
    ORG_DOMAIN: ${{self:custom.brand.ORG_DOMAIN}}
    ORG_NAME: ${{self:custom.brand.ORG_NAME}}
    ORG_LOGO: ${{self:custom.brand.ORG_LOGO}}
    PRODUCTS: ${{self:custom.brand.PRODUCTS}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.prefix}}*'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.events}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.presence}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.inbox}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.inbox}}/index/*'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.outbox}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.pubkeys}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.pubkeys}}/index/*'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.seals}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.seals}}/index/*'
        # # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.pushsubscribers}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.users}}'
        # - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/${{self:custom.tables.users}}/index/*'

    # so lambdas can list resources in their stack
    - Effect: Allow
      Action:
        - cloudformation:ListStackResources
      Resource: ["*"]

    # allow lambdas to update themselves
    - Effect: Allow
      Action:
        - lambda:UpdateFunctionConfiguration
        - lambda:GetFunctionConfiguration
      Resource:
        - Fn::Sub: 'arn:aws:lambda:${{self:custom.region}}:${AWS::AccountId}:function:${{self:custom.prefix}}*'

    # allow access to bucket
    # TODO: give access only to the lambdas that need it
    - Effect: Allow
      Action:
        # needed to get NoSuchKey error instead of AccessDenied for non-existent items
        # https://forums.aws.amazon.com/thread.jspa?threadID=56531
        - s3:ListBucket
      Resource:
        # - arn:aws:s3:::${{self:provider.deploymentBucket}}
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: PublicConfBucket
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ObjectsBucket
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: SecretsBucket
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: FileUploadBucket

    - Effect: Allow
      Action:
        - s3:PutObject
        # needed to create an object with public-read
        - s3:PutObjectAcl
        - s3:GetObject
        # needed to check existence
        - s3:HeadObject
      Resource:
        # - arn:aws:s3:::${{self:provider.deploymentBucket}}/*
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: PublicConfBucket
            - "/*"
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ObjectsBucket
            - "/*"
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: SecretsBucket
            - "/*"
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
            - "/*"
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: FileUploadBucket
            - "/*"

    # REMOVE in prod
    # allow access to buckets from the console
    - Effect: Allow
      Action:
        - s3:GetBucketLocation
        - s3:ListAllMyBuckets
      Resource: "arn:aws:s3:::*"

    # allow lambdas to call each other
    # TODO: make this more fine grained
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

    # Iot
    - Effect: Allow
      Action: ["iot:Connect", "iot:Subscribe", "iot:Publish", "iot:Receive", "iot:DescribeEndpoint"]
      Resource: ["*"]

    # gen Iot temp credentials (lambda: preauth)
    - Effect: Allow
      Action:
        - sts:AssumeRole
      Resource:
        - Fn::GetAtt:
          - IotClientRole
          - Arn
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Sid: AllowCloudFrontUpdateDistribution
      Action:
        - cloudfront:updateDistribution
      Resource: ["*"]

      # Resource: "*"
   # - Effect: "Allow"
   #   Action:
   #     - "s3:GetObject"
   #   Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
   # - Effect: "Allow"
   #   Action:
   #     - "s3:PutObject"
   #   Resource:
   #     Fn::Join:
   #       - ""
   #       - - "arn:aws:s3:::"
   #         - "Ref" : "ServerlessDeploymentBucket"
   #         - "/*"

functions:
  # 1. generates temporary credentials (STS) for new connections,
  #    and assumes IotClientRole on them
  # 2. creates an unauthenticated session,
  #    generates a challenge to be signed (verified in /auth)
  preauth:
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: preauth
          method: any

  # 1. validates the challenge response
  # 2. marks the session as authenticated
  auth:
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: auth
          method: any

  # createevent:
  #   handler: project/lib/lambda/createevent.handler
  #   memorySize: 512

  # replicates InboxTable to EventsTable
  inbox2events:
    handler: project/lib/lambda/inbox-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - InboxTable
              - StreamArn

  # replicates OutboxTable to EventsTable
  outbox2events:
    handler: project/lib/lambda/outbox-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - OutboxTable
              - StreamArn

  # replicates SealsTable to EventsTable
  seal2events:
    handler: project/lib/lambda/seal-events.handler
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - SealsTable
              - StreamArn

  # log:
  #   handler: project/lib/lambda/log.handler
  #   # package:
  #   #   exclude:
  #   #     - node_modules/
  #   environment:
  #     DEBUG: tradle:*

    # events:
  #     - stream:
  #         type: dynamodb
  #         batchSize: 20
  #         startingPosition: TRIM_HORIZON
  #         arn:
  #           Fn::GetAtt:
  #             - EventsTable
  #             - StreamArn

  # POST messages here
  log:
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: log
          method: any

  inbox:
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: inbox
          method: any

  # triggered when an internal bot requests a message range (inbound messages)
  # inbox:
  #   handler: project/lib/lambda/inbox.handler
  #   memorySize: 1024
  #   events:
  #     - iot:
  #         sql: "SELECT * as data, topic() as topic FROM 'messages/get'"

  # triggered when a client requests a message range (outbound messages)
  # outbox:
  #   handler: project/lib/lambda/outbox.handler
  #   memorySize: 1024
  #   events:
  #     - iot:
  #         sql: "SELECT * as data, topic() as topic FROM '+/restore'"

  #   environment:
  #     DEBUG: tradle:*

  # handles IoT (MQTT) connections post-authentication
  # updates presence in PresenceTable
  onconnect:
    handler: project/lib/lambda/mqtt/onconnect.handler
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/presence/connected/#'"
          sqlVersion: ${{self:custom.versionSQL}}
    #   BOT_ONPRESENCE: ${{self:custom.bot_onpresence}}

  # updates presence in PresenceTable
  ondisconnect:
    handler: project/lib/lambda/mqtt/ondisconnect.handler
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/presence/disconnected/#'"
          sqlVersion: ${{self:custom.versionSQL}}
    #   BOT_ONPRESENCE: ${{self:custom.bot_onpresence}}

  # triggered when a client subscribes to an MQTT topic
  # sends the client any queued up messages
  onsubscribe:
    handler: project/lib/lambda/mqtt/onsubscribe.handler
    memorySize: 1024
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/subscriptions/subscribed/#'"
          sqlVersion: ${{self:custom.versionSQL}}

  # triggered when a client sends a message
  #
  # validates, stores in OutboxTable, in ObjectsBucker (for now),
  # and passes off to bot engine
  onmessage:
    handler: project/lib/lambda/mqtt/onmessage.handler
    memorySize: 1024
    #   BOT_ONMESSAGE: ${{self:custom.bot_onmessage}}
    #   SERVERLESS_PREFIX: ${{self:custom.prefix}}
    #   SERVERLESS_STAGE: ${{self:custom.stage}}
    #   SERVERLESS_SERVICE_NAME: ${{self:service}}
    events:
      - iot:
          sql: "SELECT * as data, clientid() as clientId FROM '${{self:custom.prefixIOTTopic}}message'"
          sqlVersion: ${{self:custom.versionSQL}}

  # same as onmessage, but can handle larger payloads
  # MQTT is limited to 128KB, HTTP to 6MB
  onmessage_http:
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: message
          method: any

  # useful during development
  # trigger a message to be queued/sent to a user
  send:
    handler: project/lib/lambda/send.handler
    memorySize: 1024

  # addcontact:
  #   handler: project/lib/lambda/add-contact.handler
  #   environment:
  #     DEBUG: tradle:*

  # identity:
  #   handler: project/lib/lambda/identity.handler

  addfriend:
    handler: project/lib/lambda/add-friend.handler
    memorySize: 1024

  # performs service discovery - builds a map of logical->physical ids
  # and writes that map to the environment variables of all other lambdas
  setenvvars:
    handler: project/lib/lambda/setenvvars.handler
    # hack to enable discovery own function's own stack
    description:
      Ref: AWS::StackId

  # public endpoint for clients to get public configuration / provider identity
  # e.g. the provider's identity object, styles, currency, etc.
  info:
    handler: project/lib/lambda/http/default.handler
    memorySize: 256
      # SERVERLESS_STAGE: ${{self:custom.stage}}
      # SERVERLESS_SERVICE_NAME: ${{self:service}}
    events:
      - http:
          path: info
          method: any

  # initializes provider identity
  # generates a new identity and keys, and other misc crap
  init:
    handler: project/lib/lambda/init.handler
    memorySize: 512

  # Blockchain

  # bitcoin faucet (surprise!)
  # distributes testnet coins from local funds
  faucet_bitcoin:
    handler: project/lib/lambda/faucet-bitcoin.withdraw

  # gets funds from a bitcoin testnet faucet
  recharge_bitcoin:
    handler: project/lib/lambda/recharge-bitcoin.handler
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false

  # get funds from ethereum testnet faucet
  # (doesn't work on rinkeby, and doesn't work well on ropsten)
  recharge_ethereum:
    handler: project/lib/lambda/recharge-ethereum.handler
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false

  # writes pending transactions to the blockchain
  sealpending:
    handler: project/lib/lambda/sealpending.handler
    memorySize: 512
    timeout: 60
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false

  # polls the status of unconfirmed blockchain transactions
  pollchain:
    handler: project/lib/lambda/pollchain.handler
    memorySize: 512
    timeout: 60
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: false

    # environment:
    #   ENCRYPTION_KEY: ${{self:custom.secrets.SESSION_KEY}}
    #   EMAIL_SERVICE_API_KEY: ${{self:custom.secrets.EMAIL_SERVICE_API_KEY}}

  # simulates a short (hi! hello!) conversation with a user
  clienttest:
    handler: project/lib/lambda/clienttest.handler
    timeout: 15

  # bot-serviced lambda
  # receives pre-validated messages from the tradle engine
  # pre-processes with bot-engine
  # hands off to bot's business logic
  bot_onmessage:
    handler: project/samplebot/index.onmessage
    memorySize: 1024

  # bot-serviced lambda
  # receives seal (read/wrote) events from the tradle engine
  # hands off to bot's business logic
  bot_onsealevent:
    handler: project/samplebot/index.onseal
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - SealsTable
              - StreamArn

  # bot-serviced lambda
  # replicates Inbox to per-type tables, e.g. tradle_AboutYou, tradle_PhotoID
  bot_processinbox:
    handler: project/samplebot/index.onmessagestream
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - InboxTable
              - StreamArn

  # bot-serviced lambda
  # replicates Outbox to per-type tables, e.g. tradle_AboutYou, tradle_PhotoID
  bot_processoutbox:
    handler: project/samplebot/index.onmessagestream
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - OutboxTable
              - StreamArn

  # bot-serviced lambda
  # graphql API and GraphiQL UI endpoint
  bot_graphql:
    # make sure graphql route gets loaded
    handler: project/samplebot/index.ongraphql
    # handler: project/lib/lambda/http/default.handler
    memorySize: 512
    events:
      - http:
          path: graphql
          method: any

  # bot-serviced lambda
  # generates sample data for browsing with GraphQL
  bot_samples:
    # handler: project/samplebot/index.samples
    handler: project/lib/lambda/http/default.handler
    memorySize: 1024
    events:
      - http:
          path: samples
          method: any

resources:
  Resources:
    # servless-framework-generated API Gateway
    # ApiGatewayStage:
    #   Type: AWS::ApiGateway::Stage
    #   Properties:
    #     MethodSettings:
    #       - DataTraceEnabled: true
    #         HttpMethod: "*"
    #         LoggingLevel: INFO
    #         ResourcePath: "/*"
    #         MetricsEnabled: true

    # content-addressed storage
    # stores message payloads (message minus envelope)
    # may be going away soon
    ObjectsBucket:
      Type: "AWS::S3::Bucket"
      Description: content-addressed storage for all objects
      DeletionPolicy: Retain

    # stores identity keys
    SecretsBucket:
      Type: "AWS::S3::Bucket"
      Description: stuff
      DeletionPolicy: Retain

    # PrivateConfBucket:
    #   Type: "AWS::S3::Bucket"
    #   Properties:

    # stores the provider's public config
    # e.g. styles, currency, etc.
    PublicConfBucket:
      Type: "AWS::S3::Bucket"
      Description: public configuration, e.g. identity, styles, logo, etc.
      DeletionPolicy: Retain
      # Properties:
      #   AccessControl: PublicRead

    # stores media uploaded by users
    FileUploadBucket:
      Type: "AWS::S3::Bucket"
      Description: file upload destination for all users
      DeletionPolicy: Retain
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
                - POST
              AllowedOrigins:
                - "*"
              MaxAge: 3600

    FileUploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FileUploadBucket
        PolicyDocument:
          Id: FileUploadBucketPolicy
          Version: '2012-10-17'
          Statement:
          - Sid: PutAccess
            Action:
            - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: FileUploadBucket
                  - /
                  # ${aws:userid} will change on every session
                  # which will prevent users from clobbering old uploads
                  - ${aws:userid}
                  - "/*"
            Principal:
              AWS:
                Fn::GetAtt:
                  - IotClientRole
                  - Arn

    # EventsTable: ${{file(./project/conf/table/events.yml)}}

    # master log from which things can be rebuilt
    # in case of schema changes, disasters, etc.
    EventsTable:
      Type: AWS::DynamoDB::Table
      Description: source of truth
      Properties:
        TableName: ${{self:custom.tables.events}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    # PubKeysTable: ${{file(./project/conf/table/pubkeys.yml)}}

    # address book
    # maps public keys to identities that control them
    PubKeysTable:
      Type: AWS::DynamoDB::Table
      Description: maps pub keys to identities
      Properties:
        TableName: ${{self:custom.tables.pubkeys}}
        AttributeDefinitions:
          - AttributeName: pub
            AttributeType: S
          - AttributeName: permalink
            AttributeType: S
        KeySchema:
          - AttributeName: pub
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: permalink
            KeySchema:
              - AttributeName: permalink
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - link
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    # bodies rot in s3
    # InboxTable: ${{file(./project/conf/table/inbox.yml)}}

    # stores received messages (minus their payloads)
    InboxTable:
      Type: AWS::DynamoDB::Table
      Description: inbound messages from users
      Properties:
        TableName: ${{self:custom.tables.inbox}}
        AttributeDefinitions:
          - AttributeName: _author
            AttributeType: S
          # - AttributeName: ${{self:custom.props.seq}}
          #   AttributeType: N
          - AttributeName: _link
            AttributeType: S
          - AttributeName: time
            AttributeType: N
        KeySchema:
          - AttributeName: _author
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
          # - AttributeName: seq
          #   KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: _link
            KeySchema:
              - AttributeName: _link
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    # OutboxTable: ${{file(./project/conf/table/outbox.yml)}}

    # stores received messages (minus their payloads)
    OutboxTable:
      Type: AWS::DynamoDB::Table
      Description: outbound messages to users
      Properties:
        TableName: ${{self:custom.tables.outbox}}
        AttributeDefinitions:
          - AttributeName: _recipient
            AttributeType: S
          - AttributeName: time
            AttributeType: N
        KeySchema:
          - AttributeName: _recipient
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # SealsTable: ${{file(./project/conf/table/seals.yml)}}

    # stores pending and confirmed seals
    # i.e. object links and corresponding blockchain transaction links
    SealsTable:
      Type: AWS::DynamoDB::Table
      Description: blockchain seals for objects
      Properties:
        TableName: ${{self:custom.tables.seals}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: address
            AttributeType: S
          # 'y' vs null
          - AttributeName: unconfirmed
            AttributeType: S
          - AttributeName: unsealed
            AttributeType: S
          - AttributeName: link
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: unconfirmed
            KeySchema:
              - AttributeName: unconfirmed
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: unsealed
            KeySchema:
              - AttributeName: unsealed
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: link
            KeySchema:
              - AttributeName: link
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    # UsersTable: ${{file(./project/conf/table/users.yml)}}

    # used by the bot
    # stores schema-free user state objects
    UsersTable:
      Type: AWS::DynamoDB::Table
      Description: per-user state objects
      Properties:
        TableName: ${{self:custom.tables.users}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # stores mappings between identity permalinks and ephemeral clientIds
    # mappings are created after initial handshake and destroyed on disconnect
    PresenceTable:
      Type: AWS::DynamoDB::Table
      Description: maps ephemeral mqtt client ids to identity permalinks
      Properties:
        TableName: ${{self:custom.tables.presence}}
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
          - AttributeName: permalink
            AttributeType: S
        KeySchema:
          - AttributeName: permalink
            KeyType: HASH
          - AttributeName: clientId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # PushSubcribersTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${{self:custom.tables.pushsubscribers}}
    #     AttributeDefinitions:
    #       - AttributeName: subscriber
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: subscriber
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # IoT
    # define IoT role
    # IoTLambdaRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             AWS: arn:aws:iam:::root
    #           Action:
    #             - sts:AssumeRole

    # A SKETCH, NOT REAL CLOUD FORMATION
    # DAXCluster:
    #   Type: AWS::DynamoDB::DAX
    #   Properties:
    #     ClusterName: TradleDAX
    #     NodeType: dax.r3.large
    #     ReplicationFactor: 3
    #     IAMRoleArn: arn:aws:iam::${{self:custom.accountId}}:role/DAXRole
    #     SubnetGroup: MySubnetGroup
    #     Region: ${{self:provider.region}}

    # DAXRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: IotClientRole
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow,
    #           Principal:
    #             Service:
    #               - dax.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: DAXRole
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - dynamodb:*
    #               Resource:
    #                 - arn:aws:dynamodb:us-west-2:${{self:custom.accountId}}:*

    # role assumed by all IoT clients
    IotClientRole:
      Type: AWS::IAM::Role
      Description: role assumed by every connecting client
      Properties:
        RoleName: ${{self:custom.prefixRole}}IotClientRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                AWS:
                  - Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:root'
                  # - arn:aws:iam::${{self:custom.accountId}}:role/${{self:custom.prefix}}${{self:provider.region}}-lambdaRole"
                  # - Fn::Join" : [":", ["arn:aws:iam", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "lambdaRole" ] ] }

                # AWS: "arn:aws:iam::${{{}}}:role/${{self:custom.prefix}}lambdaRole"
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: IotClientRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    - Fn::Sub: 'arn:aws:dynamodb:${{self:custom.region}}:${AWS::AccountId}:table/PresenceTable'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:::log-group:/aws/lambda/*:*:*
                # restrict client connect by client id
                - Effect: Allow
                  Action: ["iot:Connect"]
                  Resource: ["*"]
                  # Resource: arn:aws:iot:::client/${iot:ClientId}

                # allow all clients to publish to the send topic
                - Effect: "Allow"
                  Action: ["iot:Publish"]
                  Resource: ["*"]
                  # Resource:
                  #   - arn:aws:iot:::topic/${{self:custom.prefixIOTTopic}}message
                  #   - arn:aws:iot:::topic/${{self:custom.prefixIOTTopic}}restore

                # restrict client topic subscriptions by their client id
                - Effect: "Allow"
                  Action: ["iot:Subscribe"]
                  Resource: ["*"]
                  # Resource: arn:aws:iot:::topicfilter/${{self:custom.prefixIOTTopic}}${iot:ClientId}/*
                # restrict messages clients receive by their client id
                # this has the same function as the Subscribe rule above
                # provided the Subscribe policy is upheld, this policy should always give a pass
                - Effect: "Allow"
                  Action: ["iot:Receive"]
                  Resource: ["*"]
                  # Resource: arn:aws:iot:::topic/${{self:custom.prefixIOTTopic}}${iot:ClientId}/*

    # primarily for autoscaling dynamodb
    AutoScalingRole:
      Type: AWS::IAM::Role
      Description: role for autoscaling resources
      Properties:
        RoleName: ${{self:custom.prefixRole}}AutoScalingRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - application-autoscaling.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: AutoScalingPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:UpdateTable
                    - cloudwatch:DescribeAlarms
                    - cloudwatch:DeleteAlarms
                    - cloudwatch:PutMetricAlarm
                    - cloudwatch:GetMetricStatistics
                    - cloudwatch:SetAlarmState
                  Resource:
                    - "*"

    # WriteAutoscalingPolicy:
    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
    #   Properties:
    #     PolicyName: WriteAutoScalingPolicy
    #     PolicyType: TargetTrackingScaling
    #     TargetTrackingScalingPolicyConfiguration:
    #       TargetValue: 50.0,
    #       ScaleInCooldown: 60
    #       ScaleOutCooldown: 60
    #       PredefinedMetricSpecification:
    #         PredefinedMetricType: DynamoDBWriteCapacityUtilization

    # ReadAutoscalingPolicy:
    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
    #   Properties:
    #     PolicyName: ReadAutoScalingPolicy
    #     PolicyType: TargetTrackingScaling
    #     TargetTrackingScalingPolicyConfiguration:
    #       TargetValue: 50.0,
    #       ScaleInCooldown: 60
    #       ScaleOutCooldown: 60
    #       PredefinedMetricSpecification:
    #         PredefinedMetricType: DynamoDBWriteCapacityUtilization

    # Alarms

    # BillingAlarmNotification:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: ${{self:custom.billingAlarmTopic}}

    # first enable Billing Alerts
    #
    # http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/monitor-charges.html
    # BillingAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmDescription: Alarm if AWS spending is over ${{self:custom.thresholdBillingAlarm}}
    #     Namespace: AWS/Billing
    #     MetricName: EstimatedCharges
    #     Dimensions:
    #       - Name: Currency
    #         Value: USD
    #     Statistic: Maximum
    #     Period: '21600'
    #     EvaluationPeriods: '1'
    #     Threshold: ${{self:custom.thresholdBillingAlarm}}
    #     ComparisonOperator: GreaterThanThreshold
    #     AlarmActions:
    #       - Ref: BillingAlarmNotification
    #     InsufficientDataActions:
    #       - Ref: BillingAlarmNotification

    # ThrottlingAlarmNotification:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: ${{self:custom.throttlingAlarmTopic}}
    #     Subscription:
    #       - Endpoint: ${{self:custom.defaultEmailForNotifications}}
    #         Protocol: email

    # ThrottlingAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmDescription: Alarm if a lambda function is throttled
    #     Namespace: AWS/Lambda
    #     MetricName: Throttles
    #     Statistic: Sum
    #     Period: '60'
    #     EvaluationPeriods: '1'
    #     Threshold: ${{self:custom.thresholdThrottlingAlarm}}
    #     ComparisonOperator: GreaterThanThreshold
    #     AlarmActions:
    #       - Ref: ThrottlingAlarmNotification
    #     InsufficientDataActions:
    #       - Ref: ThrottlingAlarmNotification

    # InvocationErrorAlarmNotification:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: ${{self:custom.invocationErrorsAlarmTopic}}
    #     Subscription:
    #       - Endpoint: ${{self:custom.defaultEmailForNotifications}}
    #         Protocol: email

    # InvocationErrorAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmDescription: Alarm if a lambda functions throw errors
    #     Namespace: AWS/Lambda
    #     MetricName: Errors
    #     Statistic: Sum
    #     Period: '60'
    #     EvaluationPeriods: '1'
    #     Threshold: ${{self:custom.thresholdInvocationErrorsAlarm}}
    #     ComparisonOperator: GreaterThanThreshold
    #     AlarmActions:
    #       - Ref: ThrottlingAlarmNotification
    #     InsufficientDataActions:
    #       - Ref: ThrottlingAlarmNotification

    # SSLCertificate:
    #   Type: "AWS::CloudFormation::Stack"
    #   Properties:
    #     Parameters:
    #       domain: ${{file(./parameters.json):DomainName.Default}}
    #       hostedZoneName: ${{file(./parameters.json):HostedZoneName.Default}}
    #     TemplateURL: "https://s3-eu-west-1.amazonaws.com/is24-infrastructure-public/cloudformation/verified-ssl-certificate/ssl-certificate.template.yaml"

    # Type: AWS::Route53::RecordSet
    # Properties:
    #   HostedZoneName: ${{self:custom.hostedZoneName}}
    #   Comment: Tradle public API endpoint subdomain
    #   Name:  !Join ['', [!Ref 'Ec2Instance', ., !Ref 'AWS::Region', ., !Ref 'HostedZone', .]]
    #   Type: CNAME
    #   ResourceRecords:
    #   - Fn::GetAtt: Ec2Instance.PublicIp

    # PathMapping:
    #   Type: AWS::ApiGateway::BasePathMapping
    #   # DependsOn: ApiGatewayRestApi
    #   Properties:
    #     BasePath: ${{self:custom.stage}}
    #     DomainName: ${{self:custom.domainName}}
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     Stage: ${{self:custom.stage}}
